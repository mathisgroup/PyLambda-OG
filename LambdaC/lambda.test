eval (\x.x)A;
eval (\x.\y.z)B;
eval (\x.y)C;
eval (\x.(P1)P2)Q;
eval (\x.\y.x)y;
eval (\x.\y.(x)y)F;
eval ((\x.\y.(x)y)A)B;
eval (\x.(\y.(x)y)A)B;
eval ((\x.\y.x)A)B;
eval ((\x.\y.y)A)B;
eval (((\f.\x.\y.(x)(f)y)p)q)r;
eval (((\x.\y.\z.(y)x)(x)y)(u)z)y;
eval (\x.(\y.(x)(y)y)\z.(x)(z)z)(\u.\v.u)w;
eval (((\x.\y.\z.((x)z)(y)z)\u.\v.u)\s.s)t;
eval (((\x.(\y.(x)(y)y)\y.(x)(y)y)\z.\u.\v.(u)(z)v)(\r.\s.r)t)w;
eval ((\u.\v.(v)u)alpha)beta;
eval ((\u.\v.(v)u)alpha)beta;
eval ((\v.\u.(u)v)beta)alpha;
eval ((\u.\v.(v)v)u)beta;
eval (\x.(x)x)F;
eval (\x.\y.\z.(x)(y)z)f;

eval (?)(\u.\v.u)const;
let fact _ (?)\f.\n.(((zero)n)1)((*)n)(f)(pred)n;
eval (fact)4;
let fact _ \n.(((zero)n)1)((*)n)(fact)(pred)n;
eval (fact)4;
let gcd _ (?)\g.\a.\b.((((=)a)b)a)((((<)a)b)((g)a)((-)b)a)((g)b)((-)a)b;
eval ((gcd)6)4;
let gcd _ (?)\g.\a.\b.((((=)a)b)a)((((<)a)b)((g)a)((-)b)a)((g)b)((-)a)b;
eval ((gcd)10)14;
let gcd _ \a.\b.((((=)a)b)a)((((<)a)b)((gcd)a)((-)b)a)((gcd)b)((-)a)b;
eval ((gcd)60)14;
eval ((true)A)B;
let true_\x.\y.x;
eval ((true)A)B;
eval ((<=)5)2.71;
let DELTA _ \x.(x)x;
let OMEGA _ (DELTA)DELTA;
eval (\x.((x)\x.\y.\z.x)OMEGA)\y.((y)z)OMEGA;
eval (((\x.\y.\z.((x)z)(y)z)A)B)C;
let I _ \x.x;
let K _ \x.\y.x;
let S _ \x.\y.\z.((x)z)(y)z;
eval (((K)I)(K)A)B;
eval (zero)2;
eval (zero)0;
eval (pred)7;
eval ((+)2)3;
eval ((-)5.2)2.3;
eval ((+)((*)3)4)8;
eval ((+)1.5)3;
eval ((-)9)10.7;
let x _ 7;
let y _ 5;
eval ((+)x)y;
eval ((+)2)3;
eval ((-)5.2)2.3;
eval ((+)2)3.678;
eval ((+)((*)3)4)8;
eval ((+)1.5)3;
eval ((-)9)10.7;
let conj _ \x.\y.((x)y)false;
eval [((conj)true)true, ((conj)true)false, ((conj)false)true, ((conj)false)false];
let disj _ \x.\y.((x)true)y;
eval [((disj)true)true, ((disj)true)false, ((disj)false)true, ((disj)false)false];
let zer _ \f.\x.x;
let one _ \f.\x.(f)x;
let two _ \f.\x.(f)(f)x;
let thr _ \f.\x.(f)(f)(f)x;
let mul _ \m.\n.\f.(m)(n)f;
let sqr _ \n.((mul)n)n;
let even _ \n.((n)not)true;
let odd _ \n.((n)not)false;
eval [(odd)zer, (odd)one, (even)two, (even)thr];
let I _ \x.x;
let zer _ I;
let one _ \z.((z)false)I;
let two _ \z.((z)false)\z.((z)false)I;
let suc _ \n.\z.((z)false)n;
let test _ \n.(n)true;
let pre _ \n.(((test)n)I)(n)false;
eval [(pre)zer, (pre)one, (pre)two, (pre)(suc)two];
let fib _ \n.((((<=)n)1)1)((+)(fib)(pred)n)(fib)((-)n)2;
eval (fib)5;
eval COMBINATOR;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval [((S)((S)(K)S)K)(K)((S)K)K, ((S)K)K];
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
let P _ (K)(K)((S)K)K;
let Q _ ((S)(K)(S)(K)K)S;
let R _ (S)(K)(S)(K)S;
eval ((S)((S)(K)S)(R)Q)P;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval ((S)((S)(K)S)((S)(K)K)K)(K)((S)K)K;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
let P _ (K)(K)((S)K)K;
let Q _ ((S)(K)(S)(K)K)S;
let R _ (S)(K)(S)(K)S;
eval ((((S)((S)(K)S)((S)(K)K)I)((S)((S)(K)S)(K)I)(K)I)((S)(K)x)((S)I)I)(((S)(K)K)I)w;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
let A _ ((S)(K)S)((S)(K)K)I;
let B _ ((S)((S)(K)S)(K)I)(K)I;
eval ((S)A)B;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval [(K)((S)K)K, ((S)((S)(K)S)(K)K)(K)K];
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval \y.((S)(K)y)((S)I)I;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval [((S)((S)(K)S)K)(K)((S)K)K, ((S)K)K];
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
let P _ (K)(K)((S)K)K;
let Q _ ((S)(K)(S)(K)K)S;
let R _ (S)(K)(S)(K)S;
eval [((S)(K)P)(K)Q, (K)(P)Q, ((S)(K)P)I, ((S)((S)(K)S)(R)Q)P];
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval ((S)((S)(K)S)((S)(K)K)K)(K)((S)K)K;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
let P _ (K)(K)((S)K)K;
let Q _ ((S)(K)(S)(K)K)S;
let R _ (S)(K)(S)(K)S;
eval ((((S)((S)(K)S)((S)(K)K)I)((S)((S)(K)S)(K)I)(K)I)((S)(K)x)((S)I)I)(((S)(K)K)I)w;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
let A _ ((S)(K)S)((S)(K)K)I;
let B _ ((S)((S)(K)S)(K)I)(K)I;
eval ((S)A)B;
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval [(K)((S)K)K, ((S)((S)(K)S)(K)K)(K)K];
let S _ \x.\y.\z.((x)z)(y)z;
let K _ \x.\y.x;
let I _ \x.x;
eval \y.((S)(K)y)((S)I)I;

eval ((map)f)[a,b,c];
eval ((append)[a,b,c])[d,e,f];
eval ((map)succ)[1,2,3,4,5,((*)6)8];
eval (2)[a,((-)7)3,c,d];
eval (3)((map)succ)[1,2,3,4,5,((*)6)8];
eval (3)((map)succ)[1,2,3,4,5,6];
eval [a,b,[c,d],[]];
eval (\x.[(x)y,(y)x])MIXED;
eval (((null)[])A)B;
eval (null)[];
eval (^)[a,b,c];
eval (~)[a,b,c];
eval (null)[];
eval ([a,b,c])\x.\y.z;
eval [];
eval (2)[a,b,c];
eval (1)[[a,b],c,d];
eval (3)[a,[b,c],d];
eval ((&)A)[X,Y,Z];
eval (~)[A,B,C,D];
eval (iota)7;
eval (add)(iota)10;
eval ((map)succ)(iota)5;
let x _ ((*)3)7;
let y _ (add)[1,2,3,4,5,6];
eval (zero)((-)x)y;
let fact _ \n.(mult)(iota)n;
eval (fact)5;
let length _ (?)\h.\x.(((null)x)0)(succ)(h)(~)x;
eval (length)[a,b,c,d,e];
let length _ \x.(add)((map)\y.1)x;
eval (length)[a,b,c,d,e];
let reverse _ (?)\r.\x.(((null)(~)x)x)((append)(r)(~)x)[(^)x];
eval (reverse)[a,b,c,d];
let insr _ (?)\i.\f.\x.(((null)(~)x)(^)x)((f)(^)x)((i)f)(~)x;
eval ((insr)+)[1,2,3,4,5];
let power _ (?)\p.\x.(((null)x)[[]])((append)(p)(~)x)((map)(&)(^)x)(p)(~)x;
eval (power)(iota)5;
let power _ \x.(((null)x)[[]])((append)(power)(~)x)((map)(&)(^)x)(power)(~)x;
eval (power)(iota)5;
let fibl _ (?)\f.\n.((((=)n)1)[1,1])((&)((+)(^)(f)(pred)n)(^)(~)(f)(pred)n)(f)(pred)n;
eval (fibl)5;
let fib _ \n.((((<=)n)1.0)[1.0,1.0])([add,1])(fib)((-)n)1.0;
eval (1)(fib)20.0;
let removeone _ \x.(((null)x)[])((&)(~)x)((map)(&)(^)x)(removeone)(~)x;
let compose _ \x.\y.(((null)x)[])((append)((map)(&)(^)x)(^)y)((compose)(~)x)(~)y;
let permute _ \x.(((null)(~)x)[x])((compose)x)((map)permute)(removeone)x;
eval (permute)[a,b,c];
let tower _ \x.(((zero)(pred)(1)x)[[(2)x,(3)x]])((append)(tower)[(pred)(1)x,(2)x,(4)x,(3)x])((&)[(2)x,(3)x])(tower)[(pred)(1)x,(4)x,(3)x,(2)x];
eval (tower)[5,a,b,c];
let ack _ \m.\n.(((zero)m)(succ)n)(((zero)n)((ack)(pred)m)1)((ack)(pred)m)((ack)m)(pred)n;
eval ((ack)2)2;
let ack _ \x.(((zero)(1)x)(succ)(2)x)(((zero)(2)x)(ack)[(pred)(1)x,1])(ack)[(pred)(1)x,(ack)[(1)x,(pred)(2)x]];
eval (ack)[2,2];
let filter _ \p.\x.(((null)x)[])((((=)(^)x)((*)((/)(^)x)p)p)((filter)p)(~)x)((&)(^)x)((filter)p)(~)x;
let sieve _ \x.(((null)x)[])((&)(^)x)(sieve)((filter)(^)x)(~)x;
let fromto _ \m.\n.((((>)m)n)[])((&)m)((fromto)(succ)m)n;
eval (sieve)((fromto)2)11;
let filter _ \p.\x.(((null)x)[])((((=)(^)x)((*)((/)(^)x)p)p)((filter)p)(~)x)((&)(^)x)((filter)p)(~)x;
let sieve _ \x.(((null)x)[])((&)(^)x)(sieve)((filter)(^)x)(~)x;
eval (sieve)(~)(iota)11;
let inner _ (?)\i.\x.\y.(((null)x)0)((+)((*)(^)x)(^)y)((i)(~)x)(~)y;
eval ((inner)[1,2,3])[4,5,6];
let distl _ (?)\d.\x.\y.(((null)y)[])((&)[x,(^)y])((d)x)(~)y;
eval ((distl)A)[x,y,z];
let removeone _ (?)\r.\x.(((null)x)[])((&)(~)x)((map)(&)(^)x)(r)(~)x;
eval (removeone)[a,b,c];
let compose _ (?)\c.\x.\y.(((null)x)[])((append)((map)(&)(^)x)(^)y)((c)(~)x)(~)y;
eval ((compose)[a,b,c])[[[b,c],[c,b]],[[a,c],[c,a]],[[a,b],[b,a]]];
let removeone _ (?)\r.\x.(((null)x)[])((&)(~)x)((map)(&)(^)x)(r)(~)x;
let compose _ (?)\c.\x.\y.(((null)x)[])((append)((map)(&)(^)x)(^)y)((c)(~)x)(~)y;
let permute _ (?)\p.\x.(((null)(~)x)[x])((compose)x)((map)p)(removeone)x;
eval (permute)[a,b,c];
let below _ (?)\b.\v.\x.(((null)x)[])((((>)(^)x)v)((b)v)(~)x)((&)(^)x)((b)v)(~)x;
let above _ (?)\a.\v.\x.(((null)x)[])((((<=)(^)x)v)((a)v)(~)x)((&)(^)x)((a)v)(~)x;
let quicksort _ (?)\q.\x.(((null)x)[])((append)(q)((below)(^)x)(~)x)((&)(^)x)(q)((above)(^)x)(~)x;
eval (quicksort)[5,7,3,6,4];
let below _ \v.\x.(((null)x)[])((((>)(^)x)v)((below)v)(~)x)((&)(^)x)((below)v)(~)x;
let above _ \v.\x.(((null)x)[])((((<=)(^)x)v)((above)v)(~)x)((&)(^)x)((above)v)(~)x;
let quicksort _ \x.(((null)x)[])((append)(quicksort)((below)(^)x)(~)x)((&)(^)x)(quicksort)((above)(^)x)(~)x;
eval (quicksort)[12,17,4,34,23,2];
let insert _ \a.\x.(((null)x)[a])((((<=)a)(^)x)((&)a)x)((&)(^)x)((insert)a)(~)x;
let sort _ \list.(((null)list)[])((insert)(^)list)(sort)(~)list;
eval (sort)[12,17,4,34,23,2];
let shuffle _ (?)\s.\x.\y.(((null)x)[])((append)[(^)x,(^)y])((s)(~)x)(~)y;
eval ((shuffle)[a,b,c,d,e])[1,2,3,4,5];
let last _ (?)\t.\x.(((null)(~)x)(^)x)(t)(~)x;
eval (last)[a,b,c,d];
let allbutlast _ (?)\a.\x.(((null)(~)x)[])((&)(^)x)(a)(~)x;
eval (allbutlast)(iota)12;
let last _ \x.(((null)(~)x)(^)x)(last)(~)x;
let allbutlast _ \x.(((null)(~)x)[])((&)(^)x)(allbutlast)(~)x;
let rotright _ \x.((&)(last)x)(allbutlast)x;
eval (rotright)[1,2,3,4];
let rotleft _ \x.((append)(~)x)[(^)x];
eval (rotleft)[1,2,3,4,5];
let compare _ \x.\y.(((null)x)[])((&)((=)(^)x)(^)y)((compare)(~)x)(~)y;
eval ((compare)[1,2,3,4])[1,4,3,2];
let distl _ \x.(((null)(2)x)[])((&)[(1)x,(^)(2)x])(distl)[(1)x,(~)(2)x];
eval (distl)[a,[b1,b2,b3]];
let distr _ \x.(((null)(1)x)[])((&)[(^)(1)x,(2)x])(distr)[(~)(1)x,(2)x];
eval (distr)[[a1,a2,a3],b];
let transpose _ \x.(((null)(^)x)[])((&)((map)^)x)(transpose)((map)~)x;
let distl _ \x.(((null)(2)x)[])((&)[(1)x,(^)(2)x])(distl)[(1)x,(~)(2)x];
let distr _ \x.(((null)(1)x)[])((&)[(^)(1)x,(2)x])(distr)[(~)(1)x,(2)x];
let ip _ \z.(add)((map)mult)(transpose)z;
let mm _ \x.((map)\x.((map)ip)x)((map)distl)(distr)[(1)x,(transpose)(2)x];
eval (mm)[[[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]],[[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]];
let distl _ \x.(((null)(2)x)[])((&)[(1)x,(^)(2)x])(distl)[(1)x,(~)(2)x];
let distr _ \x.(((null)(1)x)[])((&)[(^)(1)x,(2)x])(distr)[(~)(1)x,(2)x];
let transpose _ \x.(((null)(^)x)[])((&)((map)^)x)(transpose)((map)~)x;
let ip _ \z.(add)((map)mult)(transpose)z;
let M _ \x.((map)\x.((map)ip)x)((map)distl)(distr)[(1)x,(transpose)(2)x];
let A _ (((map)false)(iota)4)(iota)4;
let B _ (transpose)A;
eval (M)[B,A];
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
eval (((uncurry)3)F)[a,b,c];
let curry _ \n.\f.(((zero)(pred)n)\x.(f)[x])((curry)(pred)n)\u.\x.(f)((append)u)[x];
eval ((curry)3)f;
let curry _ \n.\f.(((zero)(pred)n)\x.(f)[x])((curry)(pred)n)\u.\x.(f)((append)u)[x];
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
eval (((((curry)3)((uncurry)3)F)a)b)c;
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
eval (((uncurry)2)+)[2,3];
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
let gcd _ \a.\b.((((=)a)b)a)((((<)a)b)((gcd)a)((-)b)a)((gcd)b)((-)a)b;
eval (((uncurry)2)gcd)[110,60];
eval (add)[1,2,3];
let curry _ \n.\f.(((zero)(pred)n)\x.(f)[x])((curry)(pred)n)\u.\x.(f)((append)u)[x];
eval (((((curry)3)add)1)2)3;
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
let curry _ \n.\f.(((zero)(pred)n)\x.(f)[x])((curry)(pred)n)\u.\x.(f)((append)u)[x];
eval (((uncurry)3)((curry)3)add)[1,2,3];
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
eval (((uncurry)2)+)[2,3];
let uncurry _ \n.\g.\v.(((zero)(pred)n)(g)(1)v)((((uncurry)(pred)n)g)v)(n)v;
let gcd _ \a.\b.((((=)a)b)a)((((<)a)b)((gcd)a)((-)b)a)((gcd)b)((-)a)b;
eval (((uncurry)2)gcd)[110,60];
let mutualrecg _ \n.(((zero)n)1)((+)2)((/)((*)(mutualrecg)(pred)n)((?)\mutualrecf.\n.(((zero)n)0)((+)(mutualrecf)(pred)n)(mutualrecg)(pred)n)n)((*)n)n;
let mutualrecf _ \n.(((zero)n)0)((+)(mutualrecf)(pred)n)(mutualrecg)(pred)n;
eval ((map)[mutualrecf,mutualrecg])[0,1,2,3];
let mutualrecF _ [\n.(((zero)n)0)((+)((1)mutualrecF)(pred)n)((2)mutualrecF)(pred)n, \n.(((zero)n)1)((+)2)((/)((*)((2)mutualrecF)(pred)n)((1)mutualrecF)n)((*)n)n];
eval ((map)mutualrecF)[0,1,2,3];
let rest _ \z.\x.\n.((((<)z)0.000001)[])((&)z)(((rest)((*)z)((/)x)n)x)(succ)n;
let etothex _ \x.(add)(((rest)1.0)x)1;
eval (etothex)10.0;

let ack _ \x.(((zero)(1)x)(succ)(2)x)(((zero)(2)x)(ack)[(pred)(1)x,1])(ack)[(pred)(1)x,(ack)[(1)x,(pred)(2)x]];
eval (ack)[2,2];
let fast _ (?)\f.\n.((((=)n)1)[1,1])([add, ^])(f)(pred)n;
eval (fast)9;
let fast _ (?)\f.\n.((((=)n)1)[1,1])([\x.((+)(^)x)(^)(~)x, ^])(f)(pred)n;
eval (fast)9;
let fast _ (?)\f.\n.((((=)n)1)[1,1])([\x.((+)(1)x)(2)x, 1])(f)(pred)n;
eval (fast)9;
let tower _ \x.(((zero)(pred)(1)x)[[(2)x,(3)x]])((append)(tower)[(pred)(1)x,(2)x,(4)x,(3)x])((&)[(2)x,(3)x])(tower)[(pred)(1)x,(4)x,(3)x,(2)x];
eval (tower)[4,a,b,c];
let flat _ \s.(((null)s)[])((append)(^)s)(flat)(~)s;
let list _ \n.(flat)((map)\c.(flat)((map)\b.((map)\a.[a,b,c])(iota)b)(iota)((-)n)c)(iota)((/)n)2;
let sq _ \n.((*)n)n;
let test _ \triple.((=)((+)(sq)(1)triple)(sq)(2)triple)(sq)(3)triple;
let filter _ \test.\list.(((null)list)[])(((test)(^)list)((&)(^)list)((filter)test)(~)list)((filter)test)(~)list;
eval ((filter)test)(list)12;
@

